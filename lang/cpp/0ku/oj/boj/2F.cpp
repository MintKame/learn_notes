#include<stdio.h>
//用平面坐标记录当前位置，d记录当前方向 
//更新方向：由方向以及石头数
//前进：根据当前方向更改xy坐标 
//按字母顺序逐个判断 
int main()
{
	struct{ //记录位置 
		int x;
		int y;
	}s;
	char p[25]={};
	int n;
	int d=4;//1,2,3,4分别为当前方向nesw
	scanf("%s",p);
	for(n=0;p[n]!=0;n++)
	{
//更新方向
		if(d==2&&p[n]=='2'||d==3&&p[n]=='1'||d==4&&p[n]=='3')
			d=3;
		else if(d==1&&p[n]=='1'||d==2&&p[n]=='3'||d==4&&p[n]=='2')
			d=1;
		else if(d==1&&p[n]=='3'||d==3&&p[n]=='2'||d==4&&p[n]=='1')
			d=4;
		else if(d==1&&p[n]=='2'||d==2&&p[n]=='1'||d==3&&p[n]=='3')
			d=2;
//前进 
		if(d==1)
		s.y++;
		else if(d==2)
		s.x++;
		else if(d==3)
		s.y--;
		else if(d==4)
		s.x--;		
	};
	printf("%d,",n);
//按字母顺序逐个判断 
	if(s.x>0)
	printf("e");
	if(s.y>0)
	printf("n");
	if(s.y<0)
	printf("s");
	if(s.x<0)
	printf("w");
	return 0;
}
//题目描述
//公元13世纪上半叶，蒙古军队一路西征杀向欧洲。在进军途中，蒙古骑兵以旗为单位沿一条道路相继开进。为了给后面的队伍指路，每当遇到一个道路分叉处时，就在路旁堆石头堆作路标，堆一堆石头表示直行，堆两堆石头表示右转，堆三堆石头表示左转。试用C语言编写一个程序，计算出通过的路口数目。假设每个相邻路口间路段的长度基本相等且开始的方向向西(以此判断第一个路口，即出发时向哪个方向走)，用输出eswn四个字母或其组合来确定最终的地点相对于出发地(即第一个路口)的方位。
//输入格式
//只有一行(以’\n’结束)，分别用1、2和3表示路口遇到的石碓的数量，最多有20个路口。
//输出格式
//只有一行，由一个数字和一个字母或两个字母组合分别构成路口的数目和最终地点与出发地的方位。如果需要输出两个字母，则输出字母按照字典序输出(不用考虑回到原始出发点的情况)。
//
//输入样例
//31
//输出样例
//2,s
