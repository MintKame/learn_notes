package _7_io;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PrintWriter;

public class _4_1_data_out {
  public static void main(String[] args) throws IOException {
    //why use buffer ?
    //  FileI/OStream use OSys( low-level handle ) each byte
    //  buffer can: many bytes 1 time -> reduce num of disk r,w -> speed up
    BufferedOutputStream bo = new BufferedOutputStream(new FileOutputStream("4f.bin"));
    BufferedInputStream bi = new BufferedInputStream(new FileInputStream("4f.bin"));

    //which should be outer (Data / Buffered) ?
    //  data, more func to process primitive & string
    DataInputStream dis = new DataInputStream(bi);
    DataOutputStream dos = new DataOutputStream(bo);

    //how stored in the file ?
    dos.writeInt(123); // (7B)16
    dos.writeInt(1234); // (4D2)16
    // java big-end: 高地址存尾端(B, 2)
    //addr: 03 06 07
    //      7B 04 D2

    dos.writeChars("ab你好"); //  char: 2 byte (java use unicode),
    dos.writeBytes("ab你好"); //  byte: 1 byte each char(中文store lower if char is 2 bytes)
    //  byte only use for all ascii

    dos.writeUTF("ab");
    dos.writeUTF("你好啊");
    // each char (using 1/3/4 bytes)
    //         -> indicate by first bits of char(0/110/1110)

    //what if eof (2-way) ?
//    dis.read();
//    dis.readBoolean();
    //  return -1
    //  readXX() throw eofException => use try-catch

    //how to close wrapped stream ?
    //  just close outer stream, will call inner's close()
    dos.close();
    dis.close();
    //why both io need close() ?
    //  I: release resource
    //  O: to store in file
  }
}