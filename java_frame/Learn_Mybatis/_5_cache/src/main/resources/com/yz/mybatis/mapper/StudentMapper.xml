<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yz.mybatis.mapper.StudentMapper">
    <!--2种方式，配置二级缓存-->

    <!--    <cache-ref namespace="com.atguigu.mybatis.dao.EmployeeMapper"/>-->
    <!-- 1：引用缓存：namespace：指定和哪个名称空间下的缓存一样 -->

    <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>
    <!-- 2：
        eviction:缓存的回收策略：
            • LRU（默认） – 最近最少使用：移除最长时间不被使用的对象。
            • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
            • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
            • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        flushInterval：缓存刷新间隔（毫秒）
            缓存多长时间清空一次，默认不清空
        readOnly:是否只读：指获取数据后，用户（java）对数据的操作只读，不会修改
            true：只读；不安全，速度快
                首次查询，缓存将result直接存储。每次获取，缓存直接将result在缓存中的引用交给用户。
            false：非只读：安全，速度慢
                首次查询，缓存将result序列化存储。每次获取，缓存将result反序列化。
        size：缓存存放多少元素；
        type=""：指定自定义缓存的全类名；实现Cache接口即可；
    -->
    <!--===================================================================================-->
    <!--select标签，useCache  只影响二级缓存  -->
    <select id="findStudentById" resultType="com.yz.mybatis.pojo.Student5" parameterType="int" useCache="true">
        select id, name, age from student where id = #{id}
    </select>

</mapper>
