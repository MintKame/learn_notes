<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--dtd文件：启动自动提示
    规定了 各标签的出现顺序：
    properties?, settings?, typeAliases?, typeHandlers?,
    objectFactory?, objectWrapperFactory?, reflectorFactory?,
    plugins?, environments?, databaseIdProvider?, mappers? -->
<configuration>

    <!-- 导入外部资源（此处用于设置数据库环境）
         resource：类路径下
         url：网络路径 或磁盘路径下
         和spring整合后，spring来处理，so不常用 -->
    <properties resource="jdbc.properties"></properties>


    <!-- 设置：影响mybatis的运行时行为 (测试见_1_)
            mapUnderscoreToCamelCase：
                查询结果 封装 为java对象时，列名 aaa_bbb -> java类的属性名 aaaBbb -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!-- typeAliases：为java类起别名（不区分大小写
                      在mapper.xml中 用别名，不用写全类名
            建议全类名：mapper文件中可直接跳转到对应接口
            注意：不能与 java 基本类型和包装类的别名重复 _int, integer
            typeAlias
                type：全类名
                alias：别名
            package: 某包所有类，批量起别名（类名小写）
                name：包名
                问题：冲突
                解决：@Alias注解，为某类指定新别名                 -->
    <typeAliases>
        <typeAlias type="com.yz.mybatis.pojo._2_Test" alias="test2"/>
        <!--        <package name="com.atguigu.mybatis.bean"/>-->
    </typeAliases>

    <!--    typeHandlers   类型处理器（之后
        映射：java类型 - 数据库类型
        JSR310时间类型（jdk1.8）
        mysql为此提供了新的类型处理器，需要下载，在config中一一注册 -->

    <!-- 开发环境(多种)
        default：指定某种环境。可以达到快速切换环境。
        和spring整合后，常由spring配置

        事务管理器，目前由MyBatis管理
            type类型：JDBC(JdbcTransactionFactory)
                     MANAGED(ManagedTransactionFactory)
            自定义：实现TransactionFactory接口.type指定全类名

        DataSource标准数据源，目前由MyBatis管理
            type类型：UNPOOLED(UnpooledDataSourceFactory)
                     POOLED(PooledDataSourceFactory)
                     JNDI(JndiDataSourceFactory)
            自定义：实现DataSourceFactory接口，type指定全类名-->
    <environments default="dev_mysql">
        <environment id="dev_mysql">    <!--当前环境的唯一标识-->
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${mysql.driver}"/>
                <property name="url" value="${mysql.url}"/>
                <property name="username" value="${mysql.username}"/>
                <property name="password" value="${mysql.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 为 不同的数据库厂商 起别名
            type="DB_VENDOR"：VendorDatabaseIdProvider
        how使用：
            配置文件：设置数据库厂商的别名（here）
            配置文件：设置环境（使用了某个数据库厂商）
            mapper中：对于接口的同一方法，针对不同数据库：创建多条sql语句，并设置databaseId
            执行时：  根据当前环境的 数据库厂商标识，执行对应的sql-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!-- mapper文件 注册
        注册配置文件
            resource：引用类路径下的sql映射文件			（mybatis/mapper/EmployeeMapper.xml
            url：引用网路路径或者磁盘路径下的sql映射文件 （file:///var/mappers/AuthorMapper.xml
        注册接口
            class：接口全类名
                1、有mapper.xml，mapper文件名 必须和 接口同名，且路径一致（java和resources之下的相同路径）
                2、没mapper.xml，所有sql 都写在接口的注解 -->
    <mappers>
        <mapper resource="com/yz/mybatis/mapper/_1_SettingMapper.xml"></mapper>
        <mapper resource="com/yz/mybatis/mapper/_2_AliaseMapper.xml"></mapper>

        <mapper class="com.yz.mybatis.mapper.StudentMapper"></mapper>
        <!-- 批量注册： -->
<!--        <package name="com.atguigu.mybatis.dao"/>-->
    </mappers>
</configuration>
